create database RetailDB;
USE RetailDB
1) --How many states are there where products have been sold ?
select count(Distinct state)
from Location;
select Distinct State
from Location;
2) --How many products are of regular type ?
select count(Product)
from product
where Type='regular';
--3) How much spending has been done on marketing of product id 1
select sum(marketing)
from fact
where productid=1
--4) What is the minimum sales of a product ?
select min(sales) as 'minimum sales' from fact 
---5) Display max Cost of Good Sold(COGS).
select MAX(COGS)'max cogs' from fact
---6) Display the Details of the productid where product type is coffee
select *
from product where Product_Type='coffee';
---7) Display the details where total_expenses is greater than 40.
select *
from fact
where Total_Expenses>40;
---8) What is the average sales in Area_Code 719 ?
select AVG(sales)'Average sales in area code 719'
from fact
where area_code=719;
---9) Find out the total profit generated by Colorado state.
select SUM(profit) 'sum of profit by colorado state'
from fact f
INNER Join Location l
on  f.Area_Code=l.Area_Code
where State='Colorado'
---10) Display the average inventory for each product id.
select  ProductId,AVG(Inventory)
from fact
group by ProductId 
order by ProductId
---11) Display state in a sequential order in a location table.
select distinct State
from Location 
order by State;
---12) Display the average budget margin of the store where average budget margin should be
--greater than 100.
select area_code,AVG(Budget_Margin) 'average budget margin'
from fact
group by Area_Code
having AVG(Budget_Margin)>100
--13) What is the total sales done on date 2010-01-01
select SUM(sales) total_sales
from fact where Date='2010-01-01'
---14)Display the average total expense of each product id on individual date
select productID,Date,AVG(Total_Expenses) 'average total expenses'
from fact
group by ProductId,Date
order by ProductId,Date
---15) Display the table with the following attributes such as
---Date, productid, product_type, product, Sales, profit, state, area_code
select Date,f.ProductId,Product_Type,Product,Sales,Profit,L.State,f.Area_Code
from fact f
Inner Join Product p
on f.ProductId=p.ProductId
inner join Location L
on f.Area_Code=L.Area_Code
---16) Display the rank without any gap to show the Sales wise rank.
select Sales,DENSE_RANK() over(order by sales desc)sales_rank
from fact
order by Sales desc
---17) Find the State wise Profit and Sales.
select State,sum(Profit)'Profit',sum(Sales)'Sales'
from Fact f
inner join Location l
on f.Area_Code=l.Area_Code
group by State
---18) Find the State wise Profit and Sales along with the Product Name.
select Product,sum(profit) 'Sum of Profit',sum(sales)'Sum of sales'
from fact f
inner join Product p
on f.ProductId=p.ProductId
group by product
---19) If there is an increase in sales of 5%. Calculate the increased sales.
select Sales*1.05 'Increased Sales'
from fact
---20) Find the maximum profit along with the Product id and Product Type.
select top 1 f.ProductId,Product_Type,max(profit) max_profit
from fact f
inner join Product p
on f.ProductId=p.ProductId
group by Product_Type,f.ProductId
order by max_profit Desc
---21) Create a Stored Procedure to fetch the result according to the product type from Product.
Create procedure GetProductType @productType varchar(50)
As 
Begin
  select * from Product
  where Product_Type=@productType
End
EXEC GetProductType 'tea'
---22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
SELECT 
  CASE 
    WHEN Total_Expenses < 60 THEN 'Profit' 
    ELSE 'Loss' 
  END AS 'Profit_or_Loss'
FROM fact;
select IIF(Total_Expenses<60,'Profit','Loss')'Profit or loss'
from fact;

---23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the data in hierarchical order.
SELECT 
Datepart(wk,Date) 'Week', ProductID, SUM(Sales) AS Total_Weekly_Sales
FROM Fact
GROUP BY ROLLUP(Datepart(wk,Date), ProductID);

---24) Apply union and intersection operator on the tables which consist of attribute area code.
select Area_Code from fact
union
select Area_Code from Location;
select Area_Code from fact
intersect
select Area_Code from Location;
---25) Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
CREATE FUNCTION GetProductByType (@productType VARCHAR(50))
RETURNS @result TABLE (ProductId INT, Product VARCHAR(50), Product_Type VARCHAR(50), Type VARCHAR(50))
AS
Begin
  Insert Into @result
  select ProductId, Product, Product_Type, Type
  from Product
  where Product_Type=@productType;
  Return;
End;
SELECT *
FROM dbo.GetProductByType('Tea');

---26) Change the product type from coffee to tea where product id is 1 and undo it.
Begin Transaction
Update Product
set Product_Type='Tea'
where ProductId=1;
ROLLBACK;
select *from Product where ProductId=1
---27) Display the Date, productid and sales where total expenses are between 100 to 200.
select DATE,ProductId,Sales
from fact
where Total_Expenses>100 and Total_Expenses<200
---28) Delete the records in the product table for regular type.
--Delete from Product
--where Product_Type='regular'
---29) Display the ASCII value of the fifth character from the column product
select ASCII(SUBSTRING(product,5,1)) 'ascii_value' from Product